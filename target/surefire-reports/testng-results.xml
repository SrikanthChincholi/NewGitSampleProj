<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="2" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-06-10T11:54:05 IST" name="Suite" finished-at="2023-06-10T11:54:53 IST" duration-ms="47828">
    <groups>
    </groups>
    <test started-at="2023-06-10T11:54:05 IST" name="Test1" finished-at="2023-06-10T11:54:32 IST" duration-ms="27308">
      <class name="sampleproj.sampleproj.LoginTest">
        <test-method is-config="true" signature="beforeTest(org.testng.ITestContext)[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e]" started-at="2023-06-10T11:54:05 IST" name="beforeTest" finished-at="2023-06-10T11:54:05 IST" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@571a663c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e]" started-at="2023-06-10T11:54:05 IST" name="beforeMethod" finished-at="2023-06-10T11:54:09 IST" duration-ms="3792" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="login(java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e]" started-at="2023-06-10T11:54:09 IST" name="login" data-provider="Login" finished-at="2023-06-10T11:54:23 IST" duration-ms="14207" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[admin123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method is-config="true" signature="atest(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e]" started-at="2023-06-10T11:54:23 IST" name="atest" finished-at="2023-06-10T11:54:23 IST" duration-ms="125" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=login status=SUCCESS method=LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atest -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e]" started-at="2023-06-10T11:54:23 IST" name="beforeMethod" finished-at="2023-06-10T11:54:24 IST" duration-ms="808" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="login(java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e]" started-at="2023-06-10T11:54:24 IST" name="login" data-provider="Login" finished-at="2023-06-10T11:54:32 IST" duration-ms="7868" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[admin12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [admin123] but found [admin12345]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [admin123] but found [admin12345]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at sampleproj.sampleproj.LoginTest.login(LoginTest.java:28)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method is-config="true" signature="atest(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e]" started-at="2023-06-10T11:54:32 IST" name="atest" finished-at="2023-06-10T11:54:32 IST" duration-ms="121" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=login status=FAILURE method=LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atest -->
        <test-method is-config="true" signature="atest()[pri:0, instance:sampleproj.sampleproj.LoginTest@62150f9e]" started-at="2023-06-10T11:54:32 IST" name="atest" finished-at="2023-06-10T11:54:32 IST" duration-ms="331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atest -->
      </class> <!-- sampleproj.sampleproj.LoginTest -->
    </test> <!-- Test1 -->
    <test started-at="2023-06-10T11:54:32 IST" name="Test2" finished-at="2023-06-10T11:54:53 IST" duration-ms="20499">
      <class name="sampleproj.sampleproj.LoginTest">
        <test-method is-config="true" signature="suiteConfig()[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc]" started-at="2023-06-10T11:54:04 IST" name="suiteConfig" finished-at="2023-06-10T11:54:05 IST" duration-ms="304" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteConfig -->
        <test-method is-config="true" signature="beforeTest(org.testng.ITestContext)[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc]" started-at="2023-06-10T11:54:32 IST" name="beforeTest" finished-at="2023-06-10T11:54:32 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@3a788fe0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc]" started-at="2023-06-10T11:54:32 IST" name="beforeMethod" finished-at="2023-06-10T11:54:33 IST" duration-ms="817" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="login(java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc]" started-at="2023-06-10T11:54:33 IST" name="login" data-provider="Login" finished-at="2023-06-10T11:54:44 IST" duration-ms="10886" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[admin123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method is-config="true" signature="atest(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc]" started-at="2023-06-10T11:54:44 IST" name="atest" finished-at="2023-06-10T11:54:44 IST" duration-ms="125" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=login status=SUCCESS method=LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atest -->
        <test-method is-config="true" signature="beforeMethod(java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc]" started-at="2023-06-10T11:54:44 IST" name="beforeMethod" finished-at="2023-06-10T11:54:45 IST" duration-ms="819" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="login(java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc]" started-at="2023-06-10T11:54:45 IST" name="login" data-provider="Login" finished-at="2023-06-10T11:54:52 IST" duration-ms="7733" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[admin12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [admin123] but found [admin12345]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [admin123] but found [admin12345]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at sampleproj.sampleproj.LoginTest.login(LoginTest.java:28)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method is-config="true" signature="atest(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc]" started-at="2023-06-10T11:54:52 IST" name="atest" finished-at="2023-06-10T11:54:52 IST" duration-ms="84" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void sampleproj.sampleproj.LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method) throws java.lang.Exception]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=login status=FAILURE method=LoginTest.login(java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atest -->
        <test-method is-config="true" signature="atest()[pri:0, instance:sampleproj.sampleproj.LoginTest@245b4bdc]" started-at="2023-06-10T11:54:52 IST" name="atest" finished-at="2023-06-10T11:54:53 IST" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- atest -->
      </class> <!-- sampleproj.sampleproj.LoginTest -->
    </test> <!-- Test2 -->
  </suite> <!-- Suite -->
</testng-results>
